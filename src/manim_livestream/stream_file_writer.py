import os
import tempfile

from manim._config import config, logger
from manim.constants import FFMPEG_BIN
from manim.scene.scene_file_writer import SceneFileWriter
from manim.utils.file_ops import guarantee_existence

from .utils import streaming_config


class StreamFileWriter(SceneFileWriter):
    """Specialized file writer for streaming.

    Takes a good portion of its implementation from `:class:~.SceneFileWriter`
    but changes enough of it to redirect output directories and the final
    request to the streaming protocol.

    .. seealso::

        :func:`~.stream_starter.livestream`
        :class:`~.SceneFileWriter`

    """

    def __init__(self, renderer):
        super().__init__(renderer, "")
        self.sdp_path = os.path.join(config.media_dir, streaming_config.sdp_name)

    def init_output_directories(self, scene_name):
        """Overridden to avoid creation of unnecessary output directories."""
        # pass
        self._partial_movie_directory = tempfile.TemporaryDirectory(dir=config.media_dir)

    def _refresh_partial_movie_directory(self):
        self._partial_movie_directory.cleanup()
        self._partial_movie_directory = tempfile.TemporaryDirectory(dir=config.media_dir)

    @property
    def partial_movie_directory(self):
        return self._partial_movie_directory.name

    @property
    def file_path(self):
        """Returns the path of the most recent animation generated by the
        class. This is insignificant to the base class which has its own ways
        of acquiring this path.
        """
        return self.partial_movie_files[self.renderer.num_plays]

    def end_animation(self, allow_write=False):
        """Closes the input buffer and streams the rendered partial movie file.

        Called at the end of the life cycle of an :class:`~.Animation`.

        """
        super().end_animation(allow_write=allow_write)
        self.stream()

    def combine_movie_files(self):
        """Overridden: not required for live streaming.

        .. seealso::

            :class:`~.SceneFileWriter`

        """
        pass

    def stream(self):
        """Stream the (partial) video file via the configured streaming protocol."""
        logger.info(
            "Houston, we are ready to launch. Sending over to %(url)s",
            {"url": {streaming_config.streaming_url}},
        )
        command = [
            FFMPEG_BIN,
            "-re",
            "-i",
            '"{}"'.format(self.file_path),
            "-vcodec",
            "copy",
            "-an",
            "-loglevel",
            "quiet",
        ]

        if streaming_config.streaming_protocol == "rtp":
            command += ["-sdp_file", '"{}"'.format(self.sdp_path)]
        command += [
            "-f",
            streaming_config.streaming_protocol,  # Take a look here for other streaming protocols
            streaming_config.streaming_url,
        ]
        os.system(" ".join(command))
        self._refresh_partial_movie_directory()

    def close_movie_pipe(self):
        self.writing_process.stdin.close()
        self.writing_process.wait()
        logger.info(
            f"Animation {self.renderer.num_plays}: File at %(path)s",
            {"path": {self.file_path}},
        )
